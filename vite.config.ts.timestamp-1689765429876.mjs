// vite.config.ts
import { loadEnv } from "file:///I:/worker/web-wt/node_modules/vite/dist/node/index.js";
import { resolve as resolve2 } from "path";

// build/utils.ts
function wrapperEnv(envConf) {
  const ret = {};
  for (const envName of Object.keys(envConf)) {
    let realName = envConf[envName].replace(/\\n/g, "\n");
    realName = realName === "true" ? true : realName === "false" ? false : realName;
    if (envName === "VITE_PROXY" && realName) {
      try {
        realName = JSON.parse(realName.replace(/'/g, '"'));
      } catch (error) {
        realName = "";
      }
    }
    ret[envName] = realName;
    if (typeof realName === "string") {
      process.env[envName] = realName;
    } else if (typeof realName === "object") {
      process.env[envName] = JSON.stringify(realName);
    }
  }
  return ret;
}

// build/vite/plugin/index.ts
import vue from "file:///I:/worker/web-wt/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueJsx from "file:///I:/worker/web-wt/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import windiCSS from "file:///I:/worker/web-wt/node_modules/vite-plugin-windicss/dist/index.mjs";
import legacy from "file:///I:/worker/web-wt/node_modules/@vitejs/plugin-legacy/dist/index.mjs";
import AutoImport from "file:///I:/worker/web-wt/node_modules/unplugin-auto-import/dist/vite.js";
import Components from "file:///I:/worker/web-wt/node_modules/unplugin-vue-components/dist/vite.mjs";
import ViteImages from "file:///I:/worker/web-wt/node_modules/vite-plugin-vue-images/dist/index.cjs";
import { VantResolver } from "file:///I:/worker/web-wt/node_modules/unplugin-vue-components/dist/resolvers.mjs";

// build/vite/plugin/svgSprite.ts
import { createSvgIconsPlugin } from "file:///I:/worker/web-wt/node_modules/vite-plugin-svg-icons/dist/index.mjs";
import { resolve } from "path";
function configSvgIconsPlugin(isBuild) {
  const svgIconsPlugin = createSvgIconsPlugin({
    iconDirs: [resolve(process.cwd(), "src/assets/images/svg")],
    svgoOptions: isBuild,
    symbolId: "icon-[dir]-[name]"
  });
  return svgIconsPlugin;
}

// build/vite/plugin/index.ts
import nodePolyfills from "file:///I:/worker/web-wt/node_modules/rollup-plugin-polyfill-node/dist/index.js";
import { visualizer } from "file:///I:/worker/web-wt/node_modules/rollup-plugin-visualizer/dist/plugin/index.js";
import viteCompression from "file:///I:/worker/web-wt/node_modules/vite-plugin-compression/dist/index.mjs";
function createVitePlugins(viteEnv, isBuild) {
  const { VITE_LEGACY } = viteEnv;
  const vitePlugins = [
    vue(),
    vueJsx(),
    visualizer({ open: true }),
    viteCompression({
      threshold: 1024e3
    })
  ];
  vitePlugins.push(windiCSS());
  vitePlugins.push(
    ViteImages({
      dirs: ["src/assets/images"],
      customSearchRegex: "([a-zA-Z0-9_]+)"
    })
  );
  vitePlugins.push(
    AutoImport({
      dts: "types/auto-imports.d.ts",
      imports: ["vue", "vue-router"],
      include: [
        /\.[tj]sx?$/,
        /\.vue$/,
        /\.vue\?vue/
      ],
      eslintrc: {
        enabled: false,
        filepath: "./.eslintrc-auto-import.json",
        globalsPropValue: true
      }
    })
  );
  vitePlugins.push(
    Components({
      dirs: ["src/components"],
      resolvers: [VantResolver()],
      extensions: ["vue"],
      dts: "types/components.d.ts",
      deep: true,
      directoryAsNamespace: false
    })
  );
  if (isBuild) {
    VITE_LEGACY && vitePlugins.push(legacy());
  }
  if (!isBuild) {
    vitePlugins.push(
      nodePolyfills({
        include: ["node_modules/**/*.js", new RegExp("node_modules/.vite/.*js")]
      })
    );
  }
  vitePlugins.push(configSvgIconsPlugin(isBuild));
  return vitePlugins;
}

// build/vite/proxy.ts
var httpsRE = /^https:\/\//;
function createProxy(list = []) {
  const ret = {};
  for (const [prefix, target] of list) {
    const isHttps = httpsRE.test(target);
    ret[prefix] = {
      target,
      changeOrigin: true,
      ws: true,
      rewrite: (path2) => path2.replace(new RegExp(`^${prefix}`), ""),
      ...isHttps ? { secure: false } : {}
    };
  }
  return ret;
}

// tokenConfig.ts
import * as fs from "fs/promises";
import path from "path";
var __vite_injected_original_dirname = "I:\\worker\\web-wt";
var setToken = function() {
  const development = "dev";
  const production = "pro";
  const hostUrl = path.resolve(__vite_injected_original_dirname, "./src/config/index.ts");
  const configArgv = process.env.npm_config_argv;
  const params = process.argv.splice(2);
  const runType = configArgv ? JSON.parse(configArgv).cooked[1] : "";
  let type = runType ? runType === development ? development : production : params[0];
  if (type === "dev") {
    type = "test";
  } else {
    if (params[2] === "test") {
      type = "test";
    } else if (params[2] === "prepro") {
      type = "prepro";
    } else {
      type = "main";
    }
  }
  const routerContent = `import { ${type} } from './token';
export default ${type};
`;
  fs.writeFile(hostUrl, routerContent);
};

// vite.config.ts
import nodePolyfills2 from "file:///I:/worker/web-wt/node_modules/rollup-plugin-polyfill-node/dist/index.js";
import inject from "file:///I:/worker/web-wt/node_modules/@rollup/plugin-inject/dist/es/index.js";
function pathResolve(dir) {
  return resolve2(process.cwd(), ".", dir);
}
var vite_config_default = ({ command, mode }) => {
  setToken();
  const root = process.cwd();
  const env = loadEnv(mode, root);
  const viteEnv = wrapperEnv(env);
  const { VITE_PORT, VITE_PROXY, VITE_PUBLIC_PATH } = viteEnv;
  const isBuild = command === "build";
  return {
    base: VITE_PUBLIC_PATH,
    root,
    plugins: createVitePlugins(viteEnv, isBuild),
    server: {
      host: true,
      port: VITE_PORT,
      proxy: createProxy(VITE_PROXY)
    },
    resolve: {
      alias: [
        {
          find: "web3",
          replacement: "web3/dist/web3.min.js"
        },
        {
          find: /@\//,
          replacement: pathResolve("src") + "/"
        },
        {
          find: /#\//,
          replacement: pathResolve("types") + "/"
        }
      ]
    },
    build: {
      minify: "terser",
      target: "es2015",
      outDir: "./dist",
      emptyOutDir: true,
      assetsDir: "static",
      cssCodeSplit: true,
      sourcemap: false,
      chunkSizeWarningLimit: 2e3,
      terserOptions: {
        compress: {
          drop_console: isBuild,
          drop_debugger: true
        }
      },
      rollupOptions: {
        plugins: [inject({ Buffer: ["buffer", "Buffer"] }), nodePolyfills2()],
        output: {
          manualChunks(id, { getModuleInfo, getModuleIds }) {
            if (id.includes("node_modules")) {
              return "vendor";
            }
          },
          entryFileNames: "static/js/[name].[hash].js",
          chunkFileNames: "static/js/[name].[hash].js",
          assetFileNames: (chunkInfo) => {
            var _a;
            const subDir = ((_a = chunkInfo.name) == null ? void 0 : _a.endsWith(".css")) ? "css" : "images";
            return `static/${subDir}/[name].[hash].[ext]`;
          }
        }
      },
      commonjsOptions: {
        transformMixedEsModules: true
      }
    }
  };
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
